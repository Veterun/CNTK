# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_swig_cntk')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_swig_cntk')
    _swig_cntk = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swig_cntk', [dirname(__file__)])
        except ImportError:
            import _swig_cntk
            return _swig_cntk
        if fp is not None:
            try:
                _mod = imp.load_module('_swig_cntk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _swig_cntk = swig_import_helper()
    del swig_import_helper
else:
    import _swig_cntk
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swig_cntk.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _swig_cntk.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swig_cntk.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swig_cntk.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swig_cntk.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swig_cntk.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swig_cntk.SwigPyIterator_copy(self)

    def next(self):
        return _swig_cntk.SwigPyIterator_next(self)

    def __next__(self):
        return _swig_cntk.SwigPyIterator___next__(self)

    def previous(self):
        return _swig_cntk.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swig_cntk.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swig_cntk.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swig_cntk.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swig_cntk.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swig_cntk.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swig_cntk.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swig_cntk.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _swig_cntk.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class _ReferenceCounter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _ReferenceCounter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _ReferenceCounter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _swig_cntk.new__ReferenceCounter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete__ReferenceCounter
    __del__ = lambda self: None

    def AddReference(self):
        return _swig_cntk._ReferenceCounter_AddReference(self)

    def RemoveReference(self):
        return _swig_cntk._ReferenceCounter_RemoveReference(self)

    def GetReferenceCount(self):
        return _swig_cntk._ReferenceCounter_GetReferenceCount(self)
_ReferenceCounter_swigregister = _swig_cntk._ReferenceCounter_swigregister
_ReferenceCounter_swigregister(_ReferenceCounter)


def CopyString(source):
    return _swig_cntk.CopyString(source)
CopyString = _swig_cntk.CopyString
DataType_Unknown = _swig_cntk.DataType_Unknown
DataType_Float = _swig_cntk.DataType_Float
DataType_Double = _swig_cntk.DataType_Double
StorageFormat_Dense = _swig_cntk.StorageFormat_Dense
StorageFormat_SparseCSC = _swig_cntk.StorageFormat_SparseCSC
StorageFormat_SparseBlockCol = _swig_cntk.StorageFormat_SparseBlockCol

def IsSparseStorageFormat(storageFormat):
    return _swig_cntk.IsSparseStorageFormat(storageFormat)
IsSparseStorageFormat = _swig_cntk.IsSparseStorageFormat
DeviceType_CPU = _swig_cntk.DeviceType_CPU
DeviceType_GPU = _swig_cntk.DeviceType_GPU
class DeviceDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceDescriptor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Id(self):
        return _swig_cntk.DeviceDescriptor_Id(self)

    def Type(self):
        return _swig_cntk.DeviceDescriptor_Type(self)
    if _newclass:
        CPUDevice = staticmethod(_swig_cntk.DeviceDescriptor_CPUDevice)
    else:
        CPUDevice = _swig_cntk.DeviceDescriptor_CPUDevice
    if _newclass:
        GPUDevice = staticmethod(_swig_cntk.DeviceDescriptor_GPUDevice)
    else:
        GPUDevice = _swig_cntk.DeviceDescriptor_GPUDevice
    if _newclass:
        DefaultDevice = staticmethod(_swig_cntk.DeviceDescriptor_DefaultDevice)
    else:
        DefaultDevice = _swig_cntk.DeviceDescriptor_DefaultDevice
    __swig_destroy__ = _swig_cntk.delete_DeviceDescriptor
    __del__ = lambda self: None
DeviceDescriptor_swigregister = _swig_cntk.DeviceDescriptor_swigregister
DeviceDescriptor_swigregister(DeviceDescriptor)

def DeviceDescriptor_CPUDevice():
    return _swig_cntk.DeviceDescriptor_CPUDevice()
DeviceDescriptor_CPUDevice = _swig_cntk.DeviceDescriptor_CPUDevice

def DeviceDescriptor_GPUDevice(deviceId):
    return _swig_cntk.DeviceDescriptor_GPUDevice(deviceId)
DeviceDescriptor_GPUDevice = _swig_cntk.DeviceDescriptor_GPUDevice

def DeviceDescriptor_DefaultDevice():
    return _swig_cntk.DeviceDescriptor_DefaultDevice()
DeviceDescriptor_DefaultDevice = _swig_cntk.DeviceDescriptor_DefaultDevice

class NDShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NDShape, name)
    __repr__ = _swig_repr
    InferredDimension = _swig_cntk.NDShape_InferredDimension

    def __init__(self, *args):
        this = _swig_cntk.new_NDShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NumAxes(self):
        return _swig_cntk.NDShape_NumAxes(self)

    def SubShape(self, *args):
        return _swig_cntk.NDShape_SubShape(self, *args)

    def HasInferredDimension(self):
        return _swig_cntk.NDShape_HasInferredDimension(self)

    def TotalSize(self):
        return _swig_cntk.NDShape_TotalSize(self)

    def AppendShape(self, shape):
        return _swig_cntk.NDShape_AppendShape(self, shape)

    def __getitem__(self, i):
        return _swig_cntk.NDShape___getitem__(self, i)
    __swig_destroy__ = _swig_cntk.delete_NDShape
    __del__ = lambda self: None
NDShape_swigregister = _swig_cntk.NDShape_swigregister
NDShape_swigregister(NDShape)

def NDShape_eq(first, second):
    return _swig_cntk.NDShape_eq(first, second)
NDShape_eq = _swig_cntk.NDShape_eq

class NDArrayView(_ReferenceCounter):
    __swig_setmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDArrayView, name, value)
    __swig_getmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NDArrayView, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_NDArrayView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_NDArrayView
    __del__ = lambda self: None

    def Device(self):
        return _swig_cntk.NDArrayView_Device(self)

    def GetDataType(self):
        return _swig_cntk.NDArrayView_GetDataType(self)

    def GetStorageFormat(self):
        return _swig_cntk.NDArrayView_GetStorageFormat(self)

    def Shape(self):
        return _swig_cntk.NDArrayView_Shape(self)

    def IsSparse(self):
        return _swig_cntk.NDArrayView_IsSparse(self)

    def IsReadOnly(self):
        return _swig_cntk.NDArrayView_IsReadOnly(self)

    def DeepClone(self, readOnly=False):
        return _swig_cntk.NDArrayView_DeepClone(self, readOnly)

    def Alias(self, readOnly=False):
        return _swig_cntk.NDArrayView_Alias(self, readOnly)

    def CopyFrom(self, source):
        return _swig_cntk.NDArrayView_CopyFrom(self, source)

    def DataBufferFloat(self):
        return _swig_cntk.NDArrayView_DataBufferFloat(self)
NDArrayView_swigregister = _swig_cntk.NDArrayView_swigregister
NDArrayView_swigregister(NDArrayView)

def NDArrayViewFloat(*args):
    val = _swig_cntk.new_NDArrayViewFloat(*args)
    return val

class NDMask(_ReferenceCounter):
    __swig_setmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDMask, name, value)
    __swig_getmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NDMask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_NDMask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_NDMask
    __del__ = lambda self: None

    def MaskSection(self, sectionOffset, sectionShape):
        return _swig_cntk.NDMask_MaskSection(self, sectionOffset, sectionShape)

    def Clear(self):
        return _swig_cntk.NDMask_Clear(self)

    def Device(self):
        return _swig_cntk.NDMask_Device(self)

    def Shape(self):
        return _swig_cntk.NDMask_Shape(self)

    def DeepClone(self):
        return _swig_cntk.NDMask_DeepClone(self)

    def Alias(self):
        return _swig_cntk.NDMask_Alias(self)

    def CopyFrom(self, source):
        return _swig_cntk.NDMask_CopyFrom(self, source)
NDMask_swigregister = _swig_cntk.NDMask_swigregister
NDMask_swigregister(NDMask)

class Value(_ReferenceCounter):
    __swig_setmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_Value(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_Value
    __del__ = lambda self: None

    def Data(self):
        return _swig_cntk.Value_Data(self)

    def Mask(self):
        return _swig_cntk.Value_Mask(self)

    def DeepClone(self, readOnly=False):
        return _swig_cntk.Value_DeepClone(self, readOnly)

    def Alias(self, readOnly=False):
        return _swig_cntk.Value_Alias(self, readOnly)

    def CopyFrom(self, source):
        return _swig_cntk.Value_CopyFrom(self, source)
Value_swigregister = _swig_cntk.Value_swigregister
Value_swigregister(Value)

class Axis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Axis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Axis, name)
    __repr__ = _swig_repr

    def IsStaticAxis(self):
        return _swig_cntk.Axis_IsStaticAxis(self)

    def StaticAxisIndex(self):
        return _swig_cntk.Axis_StaticAxisIndex(self)
    __swig_setmethods__["DefaultDynamicAxis"] = _swig_cntk.Axis_DefaultDynamicAxis_set
    __swig_getmethods__["DefaultDynamicAxis"] = _swig_cntk.Axis_DefaultDynamicAxis_get
    if _newclass:
        DefaultDynamicAxis = _swig_property(_swig_cntk.Axis_DefaultDynamicAxis_get, _swig_cntk.Axis_DefaultDynamicAxis_set)
    __swig_setmethods__["BatchAxis"] = _swig_cntk.Axis_BatchAxis_set
    __swig_getmethods__["BatchAxis"] = _swig_cntk.Axis_BatchAxis_get
    if _newclass:
        BatchAxis = _swig_property(_swig_cntk.Axis_BatchAxis_get, _swig_cntk.Axis_BatchAxis_set)
    __swig_setmethods__["AllAxes"] = _swig_cntk.Axis_AllAxes_set
    __swig_getmethods__["AllAxes"] = _swig_cntk.Axis_AllAxes_get
    if _newclass:
        AllAxes = _swig_property(_swig_cntk.Axis_AllAxes_get, _swig_cntk.Axis_AllAxes_set)

    def Name(self):
        return _swig_cntk.Axis_Name(self)
    __swig_destroy__ = _swig_cntk.delete_Axis
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _swig_cntk.new_Axis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Axis_swigregister = _swig_cntk.Axis_swigregister
Axis_swigregister(Axis)
cvar = _swig_cntk.cvar


def __ne__(*args):
    return _swig_cntk.__ne__(*args)
__ne__ = _swig_cntk.__ne__
VariableKind_Input = _swig_cntk.VariableKind_Input
VariableKind_Output = _swig_cntk.VariableKind_Output
VariableKind_Parameter = _swig_cntk.VariableKind_Parameter
VariableKind_Constant = _swig_cntk.VariableKind_Constant
VariableKind_Placeholder = _swig_cntk.VariableKind_Placeholder
class Variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    __repr__ = _swig_repr

    def Shape(self):
        return _swig_cntk.Variable_Shape(self)

    def DynamicAxes(self):
        return _swig_cntk.Variable_DynamicAxes(self)

    def Kind(self):
        return _swig_cntk.Variable_Kind(self)

    def IsSparseInput(self):
        return _swig_cntk.Variable_IsSparseInput(self)

    def IsParameter(self):
        return _swig_cntk.Variable_IsParameter(self)

    def IsConstant(self):
        return _swig_cntk.Variable_IsConstant(self)

    def IsPlaceholder(self):
        return _swig_cntk.Variable_IsPlaceholder(self)

    def Name(self):
        return _swig_cntk.Variable_Name(self)

    def Owner(self):
        return _swig_cntk.Variable_Owner(self)

    def GetDataType(self):
        return _swig_cntk.Variable_GetDataType(self)

    def __init__(self, *args):
        this = _swig_cntk.new_Variable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NeedsGradient(self):
        return _swig_cntk.Variable_NeedsGradient(self)
    __swig_destroy__ = _swig_cntk.delete_Variable
    __del__ = lambda self: None
Variable_swigregister = _swig_cntk.Variable_swigregister
Variable_swigregister(Variable)

def Variable_eq(first, second):
    return _swig_cntk.Variable_eq(first, second)
Variable_eq = _swig_cntk.Variable_eq

def Variable_lt(first, second):
    return _swig_cntk.Variable_lt(first, second)
Variable_lt = _swig_cntk.Variable_lt


def __eq__(*args):
    return _swig_cntk.__eq__(*args)
__eq__ = _swig_cntk.__eq__

def __lt__(first, second):
    return _swig_cntk.__lt__(first, second)
__lt__ = _swig_cntk.__lt__
class Parameter(Variable):
    __swig_setmethods__ = {}
    for _s in [Variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_Parameter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self):
        return _swig_cntk.Parameter_Value(self)
    __swig_destroy__ = _swig_cntk.delete_Parameter
    __del__ = lambda self: None
Parameter_swigregister = _swig_cntk.Parameter_swigregister
Parameter_swigregister(Parameter)

class Constant(Variable):
    __swig_setmethods__ = {}
    for _s in [Variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    for _s in [Variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_Constant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self):
        return _swig_cntk.Constant_Value(self)
    __swig_destroy__ = _swig_cntk.delete_Constant
    __del__ = lambda self: None
Constant_swigregister = _swig_cntk.Constant_swigregister
Constant_swigregister(Constant)

class Placeholder(Variable):
    __swig_setmethods__ = {}
    for _s in [Variable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Placeholder, name, value)
    __swig_getmethods__ = {}
    for _s in [Variable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Placeholder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_Placeholder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_Placeholder
    __del__ = lambda self: None
Placeholder_swigregister = _swig_cntk.Placeholder_swigregister
Placeholder_swigregister(Placeholder)

class BackPropState(_ReferenceCounter):
    __swig_setmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackPropState, name, value)
    __swig_getmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackPropState, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Function(self):
        return _swig_cntk.BackPropState_Function(self)
    __swig_destroy__ = _swig_cntk.delete_BackPropState
    __del__ = lambda self: None
BackPropState_swigregister = _swig_cntk.BackPropState_swigregister
BackPropState_swigregister(BackPropState)

class Function(_ReferenceCounter):
    __swig_setmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    for _s in [_ReferenceCounter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Forward(self, *args):
        return _swig_cntk.Function_Forward(self, *args)

    def ForwardMap(self, *args):
        return _swig_cntk.Function_ForwardMap(self, *args)

    def Backward(self, state, rootGradientValues, backPropagatedGradientValuesForInputs):
        return _swig_cntk.Function_Backward(self, state, rootGradientValues, backPropagatedGradientValuesForInputs)

    def BackwardMap(self, state, rootGradientValues, backPropagatedGradientValuesForInputs):
        return _swig_cntk.Function_BackwardMap(self, state, rootGradientValues, backPropagatedGradientValuesForInputs)
    __swig_destroy__ = _swig_cntk.delete_Function
    __del__ = lambda self: None

    def Name(self):
        return _swig_cntk.Function_Name(self)

    def RootFunction(self):
        return _swig_cntk.Function_RootFunction(self)

    def Inputs(self):
        return _swig_cntk.Function_Inputs(self)

    def Output(self):
        return _swig_cntk.Function_Output(self)

    def Outputs(self):
        return _swig_cntk.Function_Outputs(self)

    def Arguments(self):
        return _swig_cntk.Function_Arguments(self)

    def Parameters(self):
        return _swig_cntk.Function_Parameters(self)

    def Constants(self):
        return _swig_cntk.Function_Constants(self)

    def Placeholders(self):
        return _swig_cntk.Function_Placeholders(self)

    def ReplacePlaceholders(self, placeholderReplacements):
        return _swig_cntk.Function_ReplacePlaceholders(self, placeholderReplacements)
Function_swigregister = _swig_cntk.Function_swigregister
Function_swigregister(Function)


def _Combine(*args):
    return _swig_cntk._Combine(*args)
_Combine = _swig_cntk._Combine

def Times(*args):
    return _swig_cntk.Times(*args)
Times = _swig_cntk.Times

def Plus(*args):
    return _swig_cntk.Plus(*args)
Plus = _swig_cntk.Plus

def Sigmoid(*args):
    return _swig_cntk.Sigmoid(*args)
Sigmoid = _swig_cntk.Sigmoid

def Tanh(*args):
    return _swig_cntk.Tanh(*args)
Tanh = _swig_cntk.Tanh

def CrossEntropyWithSoftmax(*args):
    return _swig_cntk.CrossEntropyWithSoftmax(*args)
CrossEntropyWithSoftmax = _swig_cntk.CrossEntropyWithSoftmax

def PredictionError(*args):
    return _swig_cntk.PredictionError(*args)
PredictionError = _swig_cntk.PredictionError

def Exp(*args):
    return _swig_cntk.Exp(*args)
Exp = _swig_cntk.Exp

def PastValue(*args):
    return _swig_cntk.PastValue(*args)
PastValue = _swig_cntk.PastValue

def FutureValue(*args):
    return _swig_cntk.FutureValue(*args)
FutureValue = _swig_cntk.FutureValue

def ElementTimes(*args):
    return _swig_cntk.ElementTimes(*args)
ElementTimes = _swig_cntk.ElementTimes

def ReduceSum(*args):
    return _swig_cntk.ReduceSum(*args)
ReduceSum = _swig_cntk.ReduceSum

def Combine(*args):
    return _swig_cntk.Combine(*args)
Combine = _swig_cntk.Combine
class MapVarValuePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapVarValuePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapVarValuePtr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_cntk.MapVarValuePtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_cntk.MapVarValuePtr___nonzero__(self)

    def __bool__(self):
        return _swig_cntk.MapVarValuePtr___bool__(self)

    def __len__(self):
        return _swig_cntk.MapVarValuePtr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _swig_cntk.MapVarValuePtr___getitem__(self, key)

    def __delitem__(self, key):
        return _swig_cntk.MapVarValuePtr___delitem__(self, key)

    def has_key(self, key):
        return _swig_cntk.MapVarValuePtr_has_key(self, key)

    def keys(self):
        return _swig_cntk.MapVarValuePtr_keys(self)

    def values(self):
        return _swig_cntk.MapVarValuePtr_values(self)

    def items(self):
        return _swig_cntk.MapVarValuePtr_items(self)

    def __contains__(self, key):
        return _swig_cntk.MapVarValuePtr___contains__(self, key)

    def key_iterator(self):
        return _swig_cntk.MapVarValuePtr_key_iterator(self)

    def value_iterator(self):
        return _swig_cntk.MapVarValuePtr_value_iterator(self)

    def __setitem__(self, *args):
        return _swig_cntk.MapVarValuePtr___setitem__(self, *args)

    def asdict(self):
        return _swig_cntk.MapVarValuePtr_asdict(self)

    def __init__(self, *args):
        this = _swig_cntk.new_MapVarValuePtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _swig_cntk.MapVarValuePtr_empty(self)

    def size(self):
        return _swig_cntk.MapVarValuePtr_size(self)

    def swap(self, v):
        return _swig_cntk.MapVarValuePtr_swap(self, v)

    def begin(self):
        return _swig_cntk.MapVarValuePtr_begin(self)

    def end(self):
        return _swig_cntk.MapVarValuePtr_end(self)

    def rbegin(self):
        return _swig_cntk.MapVarValuePtr_rbegin(self)

    def rend(self):
        return _swig_cntk.MapVarValuePtr_rend(self)

    def clear(self):
        return _swig_cntk.MapVarValuePtr_clear(self)

    def get_allocator(self):
        return _swig_cntk.MapVarValuePtr_get_allocator(self)

    def count(self, x):
        return _swig_cntk.MapVarValuePtr_count(self, x)

    def erase(self, *args):
        return _swig_cntk.MapVarValuePtr_erase(self, *args)

    def find(self, x):
        return _swig_cntk.MapVarValuePtr_find(self, x)

    def lower_bound(self, x):
        return _swig_cntk.MapVarValuePtr_lower_bound(self, x)

    def upper_bound(self, x):
        return _swig_cntk.MapVarValuePtr_upper_bound(self, x)
    __swig_destroy__ = _swig_cntk.delete_MapVarValuePtr
    __del__ = lambda self: None
MapVarValuePtr_swigregister = _swig_cntk.MapVarValuePtr_swigregister
MapVarValuePtr_swigregister(MapVarValuePtr)

class FunctionPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_FunctionPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_FunctionPtr
    __del__ = lambda self: None

    def __deref__(self):
        return _swig_cntk.FunctionPtr___deref__(self)

    def __ref__(self):
        return _swig_cntk.FunctionPtr___ref__(self)

    def GetPtr(self):
        return _swig_cntk.FunctionPtr_GetPtr(self)

    def Forward(self, *args):
        return _swig_cntk.FunctionPtr_Forward(self, *args)

    def ForwardMap(self, *args):
        return _swig_cntk.FunctionPtr_ForwardMap(self, *args)

    def Backward(self, state, rootGradientValues, backPropagatedGradientValuesForInputs):
        return _swig_cntk.FunctionPtr_Backward(self, state, rootGradientValues, backPropagatedGradientValuesForInputs)

    def BackwardMap(self, state, rootGradientValues, backPropagatedGradientValuesForInputs):
        return _swig_cntk.FunctionPtr_BackwardMap(self, state, rootGradientValues, backPropagatedGradientValuesForInputs)

    def Name(self):
        return _swig_cntk.FunctionPtr_Name(self)

    def RootFunction(self):
        return _swig_cntk.FunctionPtr_RootFunction(self)

    def Inputs(self):
        return _swig_cntk.FunctionPtr_Inputs(self)

    def Output(self):
        return _swig_cntk.FunctionPtr_Output(self)

    def Outputs(self):
        return _swig_cntk.FunctionPtr_Outputs(self)

    def Arguments(self):
        return _swig_cntk.FunctionPtr_Arguments(self)

    def Parameters(self):
        return _swig_cntk.FunctionPtr_Parameters(self)

    def Constants(self):
        return _swig_cntk.FunctionPtr_Constants(self)

    def Placeholders(self):
        return _swig_cntk.FunctionPtr_Placeholders(self)

    def ReplacePlaceholders(self, placeholderReplacements):
        return _swig_cntk.FunctionPtr_ReplacePlaceholders(self, placeholderReplacements)

    def AddReference(self):
        return _swig_cntk.FunctionPtr_AddReference(self)

    def RemoveReference(self):
        return _swig_cntk.FunctionPtr_RemoveReference(self)

    def GetReferenceCount(self):
        return _swig_cntk.FunctionPtr_GetReferenceCount(self)
FunctionPtr_swigregister = _swig_cntk.FunctionPtr_swigregister
FunctionPtr_swigregister(FunctionPtr)

class NDArrayViewPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDArrayViewPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NDArrayViewPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_NDArrayViewPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_NDArrayViewPtr
    __del__ = lambda self: None

    def __deref__(self):
        return _swig_cntk.NDArrayViewPtr___deref__(self)

    def __ref__(self):
        return _swig_cntk.NDArrayViewPtr___ref__(self)

    def GetPtr(self):
        return _swig_cntk.NDArrayViewPtr_GetPtr(self)

    def Device(self):
        return _swig_cntk.NDArrayViewPtr_Device(self)

    def GetDataType(self):
        return _swig_cntk.NDArrayViewPtr_GetDataType(self)

    def GetStorageFormat(self):
        return _swig_cntk.NDArrayViewPtr_GetStorageFormat(self)

    def Shape(self):
        return _swig_cntk.NDArrayViewPtr_Shape(self)

    def IsSparse(self):
        return _swig_cntk.NDArrayViewPtr_IsSparse(self)

    def IsReadOnly(self):
        return _swig_cntk.NDArrayViewPtr_IsReadOnly(self)

    def DeepClone(self, readOnly=False):
        return _swig_cntk.NDArrayViewPtr_DeepClone(self, readOnly)

    def Alias(self, readOnly=False):
        return _swig_cntk.NDArrayViewPtr_Alias(self, readOnly)

    def CopyFrom(self, source):
        return _swig_cntk.NDArrayViewPtr_CopyFrom(self, source)

    def DataBufferFloat(self):
        return _swig_cntk.NDArrayViewPtr_DataBufferFloat(self)

    def AddReference(self):
        return _swig_cntk.NDArrayViewPtr_AddReference(self)

    def RemoveReference(self):
        return _swig_cntk.NDArrayViewPtr_RemoveReference(self)

    def GetReferenceCount(self):
        return _swig_cntk.NDArrayViewPtr_GetReferenceCount(self)
NDArrayViewPtr_swigregister = _swig_cntk.NDArrayViewPtr_swigregister
NDArrayViewPtr_swigregister(NDArrayViewPtr)

class ValuePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValuePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValuePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_ValuePtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_ValuePtr
    __del__ = lambda self: None

    def __deref__(self):
        return _swig_cntk.ValuePtr___deref__(self)

    def __ref__(self):
        return _swig_cntk.ValuePtr___ref__(self)

    def GetPtr(self):
        return _swig_cntk.ValuePtr_GetPtr(self)

    def Data(self):
        return _swig_cntk.ValuePtr_Data(self)

    def Mask(self):
        return _swig_cntk.ValuePtr_Mask(self)

    def DeepClone(self, readOnly=False):
        return _swig_cntk.ValuePtr_DeepClone(self, readOnly)

    def Alias(self, readOnly=False):
        return _swig_cntk.ValuePtr_Alias(self, readOnly)

    def CopyFrom(self, source):
        return _swig_cntk.ValuePtr_CopyFrom(self, source)

    def AddReference(self):
        return _swig_cntk.ValuePtr_AddReference(self)

    def RemoveReference(self):
        return _swig_cntk.ValuePtr_RemoveReference(self)

    def GetReferenceCount(self):
        return _swig_cntk.ValuePtr_GetReferenceCount(self)
ValuePtr_swigregister = _swig_cntk.ValuePtr_swigregister
ValuePtr_swigregister(ValuePtr)

class NDMaskPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDMaskPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NDMaskPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_NDMaskPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_NDMaskPtr
    __del__ = lambda self: None

    def __deref__(self):
        return _swig_cntk.NDMaskPtr___deref__(self)

    def __ref__(self):
        return _swig_cntk.NDMaskPtr___ref__(self)

    def GetPtr(self):
        return _swig_cntk.NDMaskPtr_GetPtr(self)

    def MaskSection(self, sectionOffset, sectionShape):
        return _swig_cntk.NDMaskPtr_MaskSection(self, sectionOffset, sectionShape)

    def Clear(self):
        return _swig_cntk.NDMaskPtr_Clear(self)

    def Device(self):
        return _swig_cntk.NDMaskPtr_Device(self)

    def Shape(self):
        return _swig_cntk.NDMaskPtr_Shape(self)

    def DeepClone(self):
        return _swig_cntk.NDMaskPtr_DeepClone(self)

    def Alias(self):
        return _swig_cntk.NDMaskPtr_Alias(self)

    def CopyFrom(self, source):
        return _swig_cntk.NDMaskPtr_CopyFrom(self, source)

    def AddReference(self):
        return _swig_cntk.NDMaskPtr_AddReference(self)

    def RemoveReference(self):
        return _swig_cntk.NDMaskPtr_RemoveReference(self)

    def GetReferenceCount(self):
        return _swig_cntk.NDMaskPtr_GetReferenceCount(self)
NDMaskPtr_swigregister = _swig_cntk.NDMaskPtr_swigregister
NDMaskPtr_swigregister(NDMaskPtr)

class BackPropStatePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackPropStatePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackPropStatePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swig_cntk.new_BackPropStatePtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cntk.delete_BackPropStatePtr
    __del__ = lambda self: None

    def __deref__(self):
        return _swig_cntk.BackPropStatePtr___deref__(self)

    def __ref__(self):
        return _swig_cntk.BackPropStatePtr___ref__(self)

    def GetPtr(self):
        return _swig_cntk.BackPropStatePtr_GetPtr(self)

    def Function(self):
        return _swig_cntk.BackPropStatePtr_Function(self)

    def AddReference(self):
        return _swig_cntk.BackPropStatePtr_AddReference(self)

    def RemoveReference(self):
        return _swig_cntk.BackPropStatePtr_RemoveReference(self)

    def GetReferenceCount(self):
        return _swig_cntk.BackPropStatePtr_GetReferenceCount(self)
BackPropStatePtr_swigregister = _swig_cntk.BackPropStatePtr_swigregister
BackPropStatePtr_swigregister(BackPropStatePtr)


def stuff(mymap):
    return _swig_cntk.stuff(mymap)
stuff = _swig_cntk.stuff

def naivestuff(mymap):
    return _swig_cntk.naivestuff(mymap)
naivestuff = _swig_cntk.naivestuff

def data_from_value(cntk_data, data):
    return _swig_cntk.data_from_value(cntk_data, data)
data_from_value = _swig_cntk.data_from_value
# This file is compatible with both classic and new-style classes.


